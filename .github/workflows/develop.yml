name: CI/CD Pipeline

on:
  push:
    branches:
      - develop

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run:
        # Assuming IMAGE_TAG is correctly defined above and ECR_REGISTRY, ECR_REPOSITORY are set
        echo $IMAGE_TAG
        echo $ECR_REGISTRY
        echo $ECR_REPOSITORY
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USERNAME: ${{ secrets.EC2_USER }}
        KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # The SSH key needs to be saved to a file for SSH to use
        echo "$KEY" > ec2-key.pem
        chmod 400 ec2-key.pem
        # SSH into the EC2 instance, pull the latest image, and restart the Docker service
        ssh -i ec2-key.pem -o "StrictHostKeyChecking=no" $USERNAME@$HOST << EOF
          cd Portal && docker-compose pull && docker-compose up -d
        EOF
